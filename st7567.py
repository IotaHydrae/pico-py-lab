import time

import machine
from machine import Pin, SPI

EPD_HOR_RES = 128
EPD_VER_RES = 64

g_tx_buf = [0xffff] * 128 * 10

picture_1=[
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0xC0,
0xE0,0xE0,0xF0,0xF0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0x7C,0x7C,0x3C,
0x1C,0x1C,0x1C,0x1C,0x1E,0x1E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0C,0x0C,0x0C,0x0C,0x1C,0x1C,
0x1C,0x1C,0x18,0x18,0x38,0x30,0x30,0x30,0x70,0x60,0x60,0xE0,0xE0,0xC0,0xC0,0xC0,
0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
0xC0,0xE0,0xE0,0xF0,0x78,0x78,0x3C,0x1C,0x0E,0x0E,0x07,0x07,0x03,0x01,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,
0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC1,0xC1,
0xC3,0xC3,0xC3,0xC7,0xC6,0xCE,0xCC,0xDC,0xB8,0xF0,0xF0,0xE0,0xC0,0x80,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,0xFC,0xFF,0xFF,
0x0F,0x0F,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x18,0x38,0x78,
0xF8,0xF8,0xF8,0xF8,0xF8,0xC8,0x88,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0xE0,
0xF0,0xF8,0xF8,0xFC,0xFE,0xFE,0xFF,0x1F,0x0F,0x0F,0x0F,0x0B,0x1B,0x99,0xD8,0xF8,
0xF8,0x78,0x38,0x18,0x18,0x18,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x03,0x03,0x0F,0xFF,0xFE,
0xF8,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0F,0x3F,0xFF,0xFF,
0xF0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x80,0x80,0x80,0x80,0xC0,0xFF,0xFF,0xFF,0xFF,0x7F,0x1F,0x03,0x00,0x00,0x00,
0x00,0x01,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x3E,0x7C,0xF8,0xF8,0xF0,0xE0,0xC0,0x81,
0x03,0x07,0x8F,0xCF,0xDF,0xFF,0xFF,0x7C,0x7C,0x7C,0x7C,0x7E,0x6F,0x67,0x63,0x61,
0xE0,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,
0xC0,0xC0,0xE0,0xE0,0xE0,0x60,0x60,0x60,0x60,0x60,0xF0,0xF0,0xE8,0xF8,0xFF,0xFF,
0x1F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x03,0x07,0x07,0x0F,0x1F,0x1E,0x3C,0x7B,0x7B,0x77,0xF7,0xE7,0xC6,0xC6,0xC7,0x87,
0x83,0x83,0x03,0x03,0x03,0x03,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x03,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,
0xC0,0xC0,0xE0,0xE0,0xF0,0xF0,0x78,0x7C,0x3E,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x01,0x03,0x03,0x07,
0x07,0x07,0x0F,0x0F,0x0F,0x1E,0x1E,0x1E,0x1E,0x1C,0x1C,0x1C,0x1C,0x38,0x38,0x38,
0x78,0x78,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x7F,0x7F,0x7F,
0x7F,0x7F,0x7F,0x78,0x78,0x78,0x78,0x78,0x78,0x78,0x78,0x38,0x38,0x38,0x38,0x38,
0x38,0x38,0x38,0x3C,0x3C,0x1C,0x1C,0x0C,0x0E,0x0E,0x0E,0x07,0x07,0x07,0x07,0x03,
0x03,0x01,0x01,0x01,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xE0,
0x70,0x38,0x38,0xBC,0xEE,0xF7,0xF7,0xF3,0xF3,0xF7,0xF6,0xA4,0x8C,0x0C,0x18,0x18,
0x30,0x30,0x30,0x60,0x60,0x60,0x60,0x60,0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,
0x00,0x60,0xE0,0xC0,0xDC,0xDC,0xCC,0xC8,0x08,0x00,0x00,0x20,0xE0,0xE4,0xE6,0xB7,
0xB7,0xFB,0xFB,0xFF,0xDE,0xD6,0x74,0xF0,0xF0,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x46,
0x4C,0xDC,0xFE,0x78,0x3D,0xFD,0xBF,0xFF,0xFF,0xFA,0xF8,0xBF,0x1F,0x1F,0x07,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x03,0x03,0x01,0x00,0x00,
0x20,0x20,0x2F,0x2F,0x3D,0x35,0x31,0x3F,0x3F,0x3F,0x3C,0x36,0x36,0x32,0x32,0x30,
0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x08,0x08,0x0B,0x0B,0x0E,0x0E,0x1C,0x18,0x18,0x1C,0x1C,0x1F,0x1B,0x1B,
0x11,0x30,0x37,0x37,0x35,0x34,0x34,0x37,0x37,0x35,0x34,0x34,0x34,0x30,0x30,0x30,
0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x70,0x30,0x38,0x1C,0x0C,0x0E,0x07,
0x03,0x01,0x19,0x3E,0x7E,0x67,0x67,0x67,0x25,0x35,0x14,0x0C,0x0E,0x1F,0x1F,0x1B,
0x38,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
]

class st7567(object):
    def __init__(self):
        self.spi = SPI(1, baudrate=4000000, sck=Pin(10), mosi=Pin(11))
        self.rst = Pin(23, mode=Pin.OUT, value=1)
        self.dc = Pin(22, mode=Pin.OUT, value=1)
        self.cs = Pin(25, mode=Pin.OUT, value=1)
        self.blk = Pin(12, mode=Pin.OUT, value=1)

    def spi_write8(self, b):
        self.spi.write(bytearray([b]))
        # print(b)
        pass

    def write_cmd(self, cmd):
        self.dc.low()
        self.cs.low()
        self.spi_write8(cmd)
        self.cs.high()
        pass

    def write_data(self, data):
        self.dc.high()
        self.cs.low()
        self.spi_write8(data)
        self.cs.high()
        pass

    def write_data_buffered(self, buf):
        self.dc.high()
        self.cs.low()
        for val in buf:
            self.spi_write8(val)
        self.cs.high()

    def write_reg(self, *opts):
        reg = opts[0]
        # print("reg: ", reg)
        self.write_cmd(reg)

        if len(opts) == 1:
            return

        opts = opts[1:]
        for val in opts:
            # print("val: ", val)
            self.write_data(val)

    def init_display(self):
        self.reset()
        self.write_cmd(0xe2)    # software rst
        self.write_cmd(0xa6)    # set display off

        self.write_cmd(0xa1)    # set SEG direction : reverse x
        self.write_cmd(0xc8)    # set COM direction : reverse y

        self.write_cmd(0x2f)    # enable internal regulator
        self.write_cmd(0x26)    # set Vo level : PR
        self.write_cmd(0xa2)    # set lcd bias
        self.write_cmd(0xf8)    # set internal booster
        self.write_cmd(0x00)    # and this

        self.write_cmd(0x81)    # set Vo level : EV
        self.write_cmd(0x09)    # and this

        # self.write_cmd(0xa5)  # set all pixels on
        # self.write_cmd(0xaf)  # set display on

    def set_display(self, en):
        if en == True:
            self.write_cmd(0xaf)
        else:
            self.write_cmd(0xae)

    def set_page(self, page):
        self.write_cmd(0xB0 | (page & 0x0f))

    def set_row(self, row):
        self.write_cmd(0x40 | (row & 0x3f))

    def set_col(self, col):
        self.write_cmd(0x10 | ((col >> 4) & 0x0f))
        self.write_cmd(col & 0x0f)

    def set_cursor(self, x, y):
        self.set_row(y)
        self.set_col(x)

    def reset(self):
        self.rst.high()
        time.sleep_us(100)
        self.rst.low()
        time.sleep_us(100)
        self.rst.high()

    def put_pixel(self, x, y, color):
        self.set_cursor(x, y)
        self.write_data(color & 0xff)

    def clear(self):
        for y in range(8):
            self.set_page(y)
            self.set_col(4)
            for x in range(128):
                self.write_data(0x00)

    def draw_img(self, img):
        for y in range(8):
            self.set_page(y)
            self.set_col(4)
            for x in range(128):
                self.write_data(img[x + y*128])

if __name__ == "__main__":
    machine.freq(240000000)  # set the CPU frequency to 240 MHz
    print("CPU freq : ", machine.freq() / 1000000, "MHz")

    dev = st7567()
    dev.init_display()

    print("cleaning screen ...")
    dev.clear()

    dev.draw_img(picture_1)

    dev.set_display(True)

    # print("drawing test...")
    # for x in range(64):
    #         dev.put_pixel(x, x, 0xff)

    # for x in range(240):
    #     for y in range(240):
    #         dev.put_pixel(x, y, 0xf12c)

    # dev.set_cursor(0, 0)
    # for i in range(240 * 240):
    #     dev.write_data(0xfd)
    #     dev.write_data(0x2c)

    # dev.set_cursor(0, 0)
    # for x in range(240):
    #         dev.put_pixel(x, x - 1, 0xf800)
    #         dev.put_pixel(x, x, 0xf800)
    #         dev.put_pixel(x, x+1, 0xf800)
    
    print("done.")