import time
from machine import Pin, SPI

from imagedata import test_img

epd_3in52_lut_r20_gc = [
    0x01, 0x0f, 0x0f, 0x0f, 0x01, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r21_gc = [
    0x01, 0x4f, 0x8f, 0x0f, 0x01, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r22_gc = [
    0x01, 0x0f, 0x8f, 0x0f, 0x01, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r23_gc = [
    0x01, 0x4f, 0x8f, 0x4f, 0x01, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r24_gc = [
    0x01, 0x0f, 0x8f, 0x4f, 0x01, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r20_du = [
    0x01, 0x0f, 0x01, 0x00, 0x00, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r21_du = [
    0x01, 0x0f, 0x01, 0x00, 0x00, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r22_du = [
    0x01, 0x8f, 0x01, 0x00, 0x00, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r23_du = [
    0x01, 0x4f, 0x01, 0x00, 0x00, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

epd_3in52_lut_r24_du = [
    0x01, 0x0f, 0x01, 0x00, 0x00, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

EPD_HOR_RES = 360
EPD_VER_RES = 240

class uc8253(object):
    def __init__(self):
        self.spi = SPI(1, baudrate=20000000, sck=Pin(10), mosi=Pin(11), miso=Pin(8))

        self.busy = Pin(3, mode=Pin.IN)
        self.rst = Pin(6, mode=Pin.OUT, value=1)
        self.dc = Pin(7, mode=Pin.OUT, value=1)
        self.cs = Pin(9, mode=Pin.OUT, value=1)

        self.epd_3in52_flag = 1

    def spi_write8(self, b):
        self.spi.write(bytearray([b]))
        # print(b)
        pass

    def write_cmd(self, cmd):
        self.dc.low()
        self.cs.low()
        self.spi_write8(cmd)
        self.cs.high()
        pass

    def write_data(self, data):
        self.dc.high()
        self.cs.low()
        self.spi_write8(data)
        self.cs.high()
        pass

    def read_busy(self):
        while not self.busy.value():
            continue

    def init_display(self):
        self.reset()
        self.write_cmd(0x00);
        self.write_data(0xFF);
        self.write_data(0x01);

        self.write_cmd(0x01);
        self.write_data(0x03);
        self.write_data(0x10);
        self.write_data(0x3F);
        self.write_data(0x3F);
        self.write_data(0x03);

        self.write_cmd(0x06);
        self.write_data(0x37);
        self.write_data(0x3D);
        self.write_data(0x3D);

        self.write_cmd(0x60);
        self.write_data(0x22);

        self.write_cmd(0x82);
        self.write_data(0x07);

        self.write_cmd(0x30);
        #self.write_data(0x09)   # 50Hz
        #self.write_data(0x13)   # 100Hz
        self.write_data(0x17)   # 120Hz

        self.write_cmd(0xe3);
        self.write_data(0x88);

        self.write_cmd(0x61);
        self.write_data(0xf0);
        self.write_data(0x01);
        self.write_data(0x68);

        self.write_cmd(0x50);
        self.write_data(0xB7);
        pass

    def lut_gc(self):
        self.write_cmd(0x20)  # vcom
        for i in range(len(epd_3in52_lut_r20_gc)):
            self.write_data(epd_3in52_lut_r20_gc[i])

        self.write_cmd(0x21)  # red not use
        for i in range(len(epd_3in52_lut_r21_gc)):
            self.write_data(epd_3in52_lut_r21_gc[i])

        self.write_cmd(0x24)  # bb b
        for i in range(len(epd_3in52_lut_r24_gc)):
            self.write_data(epd_3in52_lut_r24_gc[i])

        if self.epd_3in52_flag == 0:
            self.write_cmd(0x22)  # bw r
            for i in range(len(epd_3in52_lut_r22_gc)):
                self.write_data(epd_3in52_lut_r22_gc[i])
            self.write_cmd(0x23)  # wb r
            for i in range(len(epd_3in52_lut_r23_gc)):
                self.write_data(epd_3in52_lut_r23_gc[i])
            # self.epd_3in52_flag = 1
        else:
            self.write_cmd(0x22)  # bw r
            for i in range(len(epd_3in52_lut_r23_gc)):
                self.write_data(epd_3in52_lut_r23_gc[i])
            self.write_cmd(0x23)  # wb w
            for i in range(len(epd_3in52_lut_r22_gc)):
                self.write_data(epd_3in52_lut_r22_gc[i])
            self.epd_3in52_flag = 0

    def refresh(self):
        self.write_cmd(0x17)
        self.write_data(0xa5)
        self.read_busy()

    def reset(self):
        self.rst.low()
        time.sleep_us(200)
        self.rst.high()

    def fill(self, color: bool):
        target_color = 0xff
        if color:
            target_color = 0x0

        self.write_cmd(0x13)
        for i in range(EPD_HOR_RES * EPD_VER_RES / 8):
            self.write_data(target_color)
        self.lut_gc()
        self.refresh()

    def clear(self):
        self.write_cmd(0x13)
        for i in range(EPD_HOR_RES * EPD_VER_RES / 8):
            self.write_data(0xff)
        self.lut_gc()
        self.refresh()

    def show_img(self, img):
        self.write_cmd(0x13)
        for i in range(EPD_HOR_RES * EPD_VER_RES / 8):
            self.write_data(img[i])

    def read_id(self):
        pass

    def sleep(self):
        self.write_cmd(0x07)
        self.write_data(0xa5)

    def test(self):
        self.write_cmd(0x13)
        for i in range(EPD_HOR_RES * EPD_VER_RES / 8 / 4):
            self.write_data(0xff)

if __name__ == "__main__":
    dev = uc8253()
    dev.init_display()
    dev.clear()

    dev.show_img(test_img)
    dev.lut_gc()
    dev.refresh()

    dev.show_img(test_img)
    dev.lut_gc()
    dev.refresh()

    dev.sleep()
